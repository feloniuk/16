#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º

echo "üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."

# 1. –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é
php artisan make:migration fix_warehouse_inventory_items_table

# 2. –ê–±–æ –≤–∏–∫–æ–Ω—É—î–º–æ SQL –Ω–∞–ø—Ä—è–º—É —á–µ—Ä–µ–∑ tinker
php artisan tinker << 'EOF'

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
$columns = DB::select("DESCRIBE warehouse_inventory_items");
echo "–ü–æ—Ç–æ—á–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏:\n";
foreach ($columns as $col) {
    echo "- {$col->Field}\n";
}

// –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É –∫–æ–ª–æ–Ω–∫—É
try {
    DB::statement("ALTER TABLE warehouse_inventory_items DROP FOREIGN KEY IF EXISTS warehouse_inventory_items_warehouse_item_id_foreign");
    DB::statement("ALTER TABLE warehouse_inventory_items DROP COLUMN IF EXISTS warehouse_item_id");
    echo "‚úÖ –°—Ç–∞—Ä—É –∫–æ–ª–æ–Ω–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ\n";
} catch (\Exception $e) {
    echo "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: " . $e->getMessage() . "\n";
}

// –î–æ–¥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
try {
    if (!Schema::hasColumn('warehouse_inventory_items', 'warehouse_inventory_id')) {
        DB::statement("
            ALTER TABLE warehouse_inventory_items 
            ADD COLUMN warehouse_inventory_id BIGINT UNSIGNED NOT NULL AFTER id,
            ADD CONSTRAINT warehouse_inventory_items_warehouse_inventory_id_foreign 
                FOREIGN KEY (warehouse_inventory_id) 
                REFERENCES warehouse_inventories(id) 
                ON DELETE CASCADE
        ");
        echo "‚úÖ –î–æ–¥–∞–Ω–æ warehouse_inventory_id\n";
    }
    
    if (!Schema::hasColumn('warehouse_inventory_items', 'inventory_id')) {
        DB::statement("
            ALTER TABLE warehouse_inventory_items 
            ADD COLUMN inventory_id BIGINT UNSIGNED NOT NULL AFTER warehouse_inventory_id,
            ADD CONSTRAINT warehouse_inventory_items_inventory_id_foreign 
                FOREIGN KEY (inventory_id) 
                REFERENCES room_inventory(id) 
                ON DELETE CASCADE
        ");
        echo "‚úÖ –î–æ–¥–∞–Ω–æ inventory_id\n";
    }
} catch (\Exception $e) {
    echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫: " . $e->getMessage() . "\n";
}

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
$columnsAfter = DB::select("DESCRIBE warehouse_inventory_items");
echo "\n‚úÖ –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n";
foreach ($columnsAfter as $col) {
    echo "- {$col->Field} ({$col->Type})\n";
}

EOF

echo ""
echo "‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:"
echo "1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ routes/web.php - –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—ó —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—ó"
echo "2. –û—á–∏—Å—Ç—ñ—Ç—å –∫–µ—à: php artisan cache:clear"
echo "3. –û—á–∏—Å—Ç—ñ—Ç—å config: php artisan config:clear"
echo "4. –°–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—é –∑–Ω–æ–≤—É"