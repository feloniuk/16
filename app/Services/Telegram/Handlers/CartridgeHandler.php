<?php

namespace App\Services\Telegram\Handlers;

use App\Models\Branch;
use App\Models\CartridgeReplacement;
use App\Models\Admin;
use App\Services\Telegram\TelegramService;
use App\Services\Telegram\StateManager;
use App\Services\Telegram\KeyboardService;
use Illuminate\Support\Facades\Log;

class CartridgeHandler
{
    private TelegramService $telegram;
    private StateManager $stateManager;
    private KeyboardService $keyboard;

    public function __construct(
        TelegramService $telegram,
        StateManager $stateManager,
        KeyboardService $keyboard
    ) {
        $this->telegram = $telegram;
        $this->stateManager = $stateManager;
        $this->keyboard = $keyboard;
    }

    public function handleCallback(array $callbackQuery): void
    {
        $chatId = $callbackQuery['message']['chat']['id'];
        $userId = $callbackQuery['from']['id'];
        $messageId = $callbackQuery['message']['message_id'];
        $data = $callbackQuery['data'];

        if ($data === 'cartridge_request') {
            $this->startCartridgeRequest($chatId, $userId, $messageId);
        }
    }

    public function handleBranchSelection(array $callbackQuery, int $branchId): void
    {
        $chatId = $callbackQuery['message']['chat']['id'];
        $userId = $callbackQuery['from']['id'];
        $messageId = $callbackQuery['message']['message_id'];

        $branch = Branch::find($branchId);
        if (!$branch) {
            $this->telegram->editMessage($chatId, $messageId, "–û—à–∏–±–∫–∞: —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        $this->stateManager->setUserState($userId, 'cartridge_awaiting_room', [
            'branch_id' => $branchId,
            'branch_name' => $branch->name
        ]);

        $this->telegram->editMessage(
            $chatId, 
            $messageId, 
            "üñ®Ô∏è <b>–ó–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞</b>\n–§–∏–ª–∏–∞–ª: <b>{$branch->name}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞:", 
            $this->keyboard->getCancelKeyboard()
        );
    }

    private function startCartridgeRequest(int $chatId, int $userId, int $messageId): void
    {
        $branches = Branch::where('is_active', true)->get();
        
        if ($branches->isEmpty()) {
            $this->telegram->editMessage($chatId, $messageId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª–∏–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
            return;
        }

        $this->stateManager->setUserState($userId, 'cartridge_awaiting_branch');
        
        $this->telegram->editMessage(
            $chatId, 
            $messageId, 
            "üñ®Ô∏è <b>–ó–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", 
            $this->keyboard->getBranchesKeyboard($branches, 'cartridge')
        );
    }

    public function handleRoomInput(int $chatId, int $userId, string $room): void
    {
        $userState = $this->stateManager->getUserState($userId);
        $tempData = $userState['temp_data'] ?? [];

        if (empty(trim($room)) || strlen($room) > 50) {
            $this->telegram->sendMessage($chatId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):");
            return;
        }

        $tempData['room_number'] = trim($room);
        $this->stateManager->setUserState($userId, 'cartridge_awaiting_printer', $tempData);
        
        $this->telegram->sendMessage(
            $chatId, 
            "üñ®Ô∏è <b>–ó–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞</b>\n" .
            "–§–∏–ª–∏–∞–ª: <b>{$tempData['branch_name']}</b>\n" .
            "–ö–∞–±–∏–Ω–µ—Ç: <b>" . trim($room) . "</b>\n\n" .
            "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ (–º–æ–¥–µ–ª—å, –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä):", 
            $this->keyboard->getCancelKeyboard()
        );
    }

    public function handlePrinterInput(int $chatId, int $userId, string $printer): void
    {
        $userState = $this->stateManager->getUserState($userId);
        $tempData = $userState['temp_data'] ?? [];

        if (empty(trim($printer))) {
            $this->telegram->sendMessage($chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ:");
            return;
        }

        $tempData['printer_info'] = trim($printer);
        $this->stateManager->setUserState($userId, 'cartridge_awaiting_type', $tempData);
        
        $this->telegram->sendMessage(
            $chatId, 
            "üñ®Ô∏è <b>–ó–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞</b>\n" .
            "–§–∏–ª–∏–∞–ª: <b>{$tempData['branch_name']}</b>\n" .
            "–ö–∞–±–∏–Ω–µ—Ç: <b>{$tempData['room_number']}</b>\n" .
            "–ü—Ä–∏–Ω—Ç–µ—Ä: <b>" . trim($printer) . "</b>\n\n" .
            "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, HP CF217A):", 
            $this->keyboard->getCancelKeyboard()
        );
    }

    public function handleTypeInput(int $chatId, int $userId, ?string $username, string $cartridgeType): void
    {
        $userState = $this->stateManager->getUserState($userId);
        $tempData = $userState['temp_data'] ?? [];

        if (empty(trim($cartridgeType))) {
            $this->telegram->sendMessage($chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞:");
            return;
        }

        $this->createCartridgeRequest($chatId, $userId, $username, trim($cartridgeType), $tempData);
    }

    private function createCartridgeRequest(int $chatId, int $userId, ?string $username, string $cartridgeType, array $tempData): void
    {
        try {
            if (!isset($tempData['branch_id'], $tempData['room_number'], $tempData['printer_info'])) {
                $this->telegram->sendMessage($chatId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", $this->keyboard->getMainMenuKeyboard($userId));
                $this->stateManager->clearUserState($userId);
                return;
            }

            $cartridge = CartridgeReplacement::create([
                'user_telegram_id' => $userId,
                'username' => $username,
                'branch_id' => $tempData['branch_id'],
                'room_number' => $tempData['room_number'],
                'printer_info' => $tempData['printer_info'],
                'cartridge_type' => $cartridgeType,
                'replacement_date' => now()->toDateString(),
            ]);

            $this->stateManager->clearUserState($userId);

            $message = "‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–º–µ–Ω—É –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ —Å–æ–∑–¥–∞–Ω!</b>\n\n" .
                      "üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ ‚Ññ {$cartridge->id}:</b>\n" .
                      "üè¢ –§–∏–ª–∏–∞–ª: {$tempData['branch_name']}\n" .
                      "üö™ –ö–∞–±–∏–Ω–µ—Ç: {$tempData['room_number']}\n" .
                      "üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä: {$tempData['printer_info']}\n" .
                      "üõí –ö–∞—Ä—Ç—Ä–∏–¥–∂: " . htmlspecialchars($cartridgeType) . "\n" .
                      "\nüìß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ.";

            $this->telegram->sendMessage($chatId, $message, $this->keyboard->getMainMenuKeyboard($userId));

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            $this->notifyAdminsAboutCartridge($cartridge, $tempData['branch_name']);

        } catch (\Exception $e) {
            Log::error('Error creating cartridge request: ' . $e->getMessage());
            $this->telegram->sendMessage($chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
            $this->stateManager->clearUserState($userId);
        }
    }

    private function notifyAdminsAboutCartridge(CartridgeReplacement $cartridge, string $branchName): void
    {
        try {
            $admins = Admin::where('is_active', true)->get();
            
            if ($admins->isEmpty()) {
                Log::warning('No active admins found for cartridge notification');
                return;
            }
            
            $username = $cartridge->username ? "@{$cartridge->username}" : "ID: {$cartridge->user_telegram_id}";

            $message = "üñ®Ô∏è <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–º–µ–Ω—É –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ ‚Ññ {$cartridge->id}!</b>\n\n";
            $message .= "üìç –§–∏–ª–∏–∞–ª: <b>$branchName</b>\n";
            $message .= "üè¢ –ö–∞–±–∏–Ω–µ—Ç: <b>{$cartridge->room_number}</b>\n";
            $message .= "üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä: " . htmlspecialchars($cartridge->printer_info) . "\n";
            $message .= "üõí –ö–∞—Ä—Ç—Ä–∏–¥–∂: " . htmlspecialchars($cartridge->cartridge_type) . "\n";
            $message .= "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $username\n";
            $message .= "\n‚è∞ " . $cartridge->created_at->format('d.m.Y H:i');

            foreach ($admins as $admin) {
                try {
                    $this->telegram->sendMessage($admin->telegram_id, $message);
                } catch (\Exception $e) {
                    Log::error("Failed to notify admin {$admin->telegram_id}: " . $e->getMessage());
                }
            }
            
        } catch (\Exception $e) {
            Log::error('Error notifying admins about cartridge: ' . $e->getMessage());
        }
    }
}