<?php

namespace App\Services\Telegram\Handlers;

use App\Models\Branch;
use App\Models\RepairRequest;
use App\Models\Admin;
use App\Services\Telegram\TelegramService;
use App\Services\Telegram\StateManager;
use App\Services\Telegram\KeyboardService;
use Illuminate\Support\Facades\Log;

class RepairHandler
{
    private TelegramService $telegram;
    private StateManager $stateManager;
    private KeyboardService $keyboard;

    public function __construct(
        TelegramService $telegram,
        StateManager $stateManager,
        KeyboardService $keyboard
    ) {
        $this->telegram = $telegram;
        $this->stateManager = $stateManager;
        $this->keyboard = $keyboard;
    }

    public function handleCallback(array $callbackQuery): void
    {
        $chatId = $callbackQuery['message']['chat']['id'];
        $userId = $callbackQuery['from']['id'];
        $messageId = $callbackQuery['message']['message_id'];
        $data = $callbackQuery['data'];

        if ($data === 'repair_request') {
            $this->startRepairRequest($chatId, $userId, $messageId);
        }
    }

    public function handleBranchSelection(array $callbackQuery, int $branchId): void
    {
        $chatId = $callbackQuery['message']['chat']['id'];
        $userId = $callbackQuery['from']['id'];
        $messageId = $callbackQuery['message']['message_id'];

        $branch = Branch::find($branchId);
        if (!$branch) {
            $this->telegram->editMessage($chatId, $messageId, "–û—à–∏–±–∫–∞: —Ñ–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        $this->stateManager->setUserState($userId, 'repair_awaiting_room', [
            'branch_id' => $branchId,
            'branch_name' => $branch->name
        ]);

        $this->telegram->editMessage(
            $chatId, 
            $messageId, 
            "üîß <b>–í—ã–∑–æ–≤ IT –º–∞—Å—Ç–µ—Ä–∞</b>\n–§–∏–ª–∏–∞–ª: <b>{$branch->name}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞:", 
            $this->keyboard->getCancelKeyboard()
        );
    }

    public function handleSkipPhone(array $callbackQuery): void
    {
        $chatId = $callbackQuery['message']['chat']['id'];
        $userId = $callbackQuery['from']['id'];
        $username = $callbackQuery['from']['username'] ?? null;

        $userState = $this->stateManager->getUserState($userId);
        $tempData = $userState['temp_data'] ?? [];
        
        $this->createRepairRequest($chatId, $userId, $username, '', $tempData);
    }

    private function startRepairRequest(int $chatId, int $userId, int $messageId): void
    {
        $branches = Branch::where('is_active', true)->get();
        
        if ($branches->isEmpty()) {
            $this->telegram->editMessage($chatId, $messageId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª–∏–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
            return;
        }

        $this->stateManager->setUserState($userId, 'repair_awaiting_branch');
        
        $this->telegram->editMessage(
            $chatId, 
            $messageId, 
            "üîß <b>–í—ã–∑–æ–≤ IT –º–∞—Å—Ç–µ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", 
            $this->keyboard->getBranchesKeyboard($branches, 'repair')
        );
    }

    public function handleRoomInput(int $chatId, int $userId, string $room): void
    {
        $userState = $this->stateManager->getUserState($userId);
        $tempData = $userState['temp_data'] ?? [];

        if (empty(trim($room)) || strlen($room) > 50) {
            $this->telegram->sendMessage($chatId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):");
            return;
        }

        $tempData['room_number'] = trim($room);
        $this->stateManager->setUserState($userId, 'repair_awaiting_description', $tempData);
        
        $this->telegram->sendMessage(
            $chatId, 
            "üîß <b>–í—ã–∑–æ–≤ IT –º–∞—Å—Ç–µ—Ä–∞</b>\n" .
            "–§–∏–ª–∏–∞–ª: <b>{$tempData['branch_name']}</b>\n" .
            "–ö–∞–±–∏–Ω–µ—Ç: <b>" . trim($room) . "</b>\n\n" .
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):", 
            $this->keyboard->getCancelKeyboard()
        );
    }

    public function handleDescriptionInput(int $chatId, int $userId, string $description): void
    {
        $userState = $this->stateManager->getUserState($userId);
        $tempData = $userState['temp_data'] ?? [];

        if (empty(trim($description)) || strlen($description) < 10 || strlen($description) > 1000) {
            $this->telegram->sendMessage($chatId, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
            return;
        }

        $tempData['description'] = trim($description);
        $this->stateManager->setUserState($userId, 'repair_awaiting_phone', $tempData);
        
        $this->telegram->sendMessage(
            $chatId, 
            "üîß <b>–í—ã–∑–æ–≤ IT –º–∞—Å—Ç–µ—Ä–∞</b>\n" .
            "–§–∏–ª–∏–∞–ª: <b>{$tempData['branch_name']}</b>\n" .
            "–ö–∞–±–∏–Ω–µ—Ç: <b>{$tempData['room_number']}</b>\n" .
            "–ü—Ä–æ–±–ª–µ–º–∞: <b>" . substr($description, 0, 100) . "...</b>\n\n" .
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", 
            $this->keyboard->getPhoneKeyboard()
        );
    }

    public function handlePhoneInput(int $chatId, int $userId, ?string $username, string $phone): void
    {
        $userState = $this->stateManager->getUserState($userId);
        $tempData = $userState['temp_data'] ?? [];

        $phone = trim($phone);
        if (!empty($phone) && !preg_match('/^\+?3?8?0\d{9}$/', $phone)) {
            $this->telegram->sendMessage($chatId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +380XXXXXXXXX –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':");
            return;
        }

        $this->createRepairRequest($chatId, $userId, $username, $phone, $tempData);
    }

    private function createRepairRequest(int $chatId, int $userId, ?string $username, string $phone, array $tempData): void
    {
        try {
            if (!isset($tempData['branch_id'], $tempData['room_number'], $tempData['description'])) {
                $this->telegram->sendMessage($chatId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", $this->keyboard->getMainMenuKeyboard($userId));
                $this->stateManager->clearUserState($userId);
                return;
            }

            $repair = RepairRequest::create([
                'user_telegram_id' => $userId,
                'username' => $username,
                'branch_id' => $tempData['branch_id'],
                'room_number' => $tempData['room_number'],
                'description' => $tempData['description'],
                'phone' => $phone ?: null,
                'status' => '–Ω–æ–≤–∞'
            ]);

            $this->stateManager->clearUserState($userId);

            $message = "‚úÖ <b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n" .
                      "üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ‚Ññ {$repair->id}:</b>\n" .
                      "üè¢ –§–∏–ª–∏–∞–ª: {$tempData['branch_name']}\n" .
                      "üö™ –ö–∞–±–∏–Ω–µ—Ç: {$tempData['room_number']}\n" .
                      "üìù –ü—Ä–æ–±–ª–µ–º–∞: " . htmlspecialchars($tempData['description']) . "\n";
            
            if (!empty($phone)) {
                $message .= "üìû –¢–µ–ª–µ—Ñ–æ–Ω: $phone\n";
            }
            
            $message .= "\nüìß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ.\n" .
                       "‚è∞ –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ –æ—Ç IT –º–∞—Å—Ç–µ—Ä–∞.";

            $this->telegram->sendMessage($chatId, $message, $this->keyboard->getMainMenuKeyboard($userId));

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            $this->notifyAdminsAboutRepair($repair, $tempData['branch_name']);

        } catch (\Exception $e) {
            Log::error('Error creating repair request: ' . $e->getMessage());
            $this->telegram->sendMessage($chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
            $this->stateManager->clearUserState($userId);
        }
    }

    private function notifyAdminsAboutRepair(RepairRequest $repair, string $branchName): void
    {
        try {
            $admins = Admin::where('is_active', true)->get();
            
            if ($admins->isEmpty()) {
                Log::warning('No active admins found for repair notification');
                return;
            }
            
            $username = $repair->username ? "@{$repair->username}" : "ID: {$repair->user_telegram_id}";

            $message = "üîß <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç ‚Ññ {$repair->id}!</b>\n\n";
            $message .= "üìç –§–∏–ª–∏–∞–ª: <b>$branchName</b>\n";
            $message .= "üè¢ –ö–∞–±–∏–Ω–µ—Ç: <b>{$repair->room_number}</b>\n";
            $message .= "üìù –ü—Ä–æ–±–ª–µ–º–∞: " . htmlspecialchars($repair->description) . "\n";
            $message .= "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $username\n";
            
            if (!empty($repair->phone)) {
                $message .= "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {$repair->phone}\n";
            }
            
            $message .= "\n‚è∞ " . $repair->created_at->format('d.m.Y H:i');

            foreach ($admins as $admin) {
                try {
                    $this->telegram->sendMessage($admin->telegram_id, $message);
                } catch (\Exception $e) {
                    Log::error("Failed to notify admin {$admin->telegram_id}: " . $e->getMessage());
                }
            }
            
        } catch (\Exception $e) {
            Log::error('Error notifying admins about repair: ' . $e->getMessage());
        }
    }
}