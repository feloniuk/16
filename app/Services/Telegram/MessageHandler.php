<?php

namespace App\Services\Telegram;

use App\Services\Telegram\TelegramService;
use App\Services\Telegram\StateManager;
use App\Services\Telegram\KeyboardService;
use App\Services\Telegram\Handlers\RepairHandler;
use App\Services\Telegram\Handlers\CartridgeHandler;
use App\Services\Telegram\Handlers\InventoryHandler;
use App\Services\Telegram\Handlers\AdminHandler;
use Illuminate\Support\Facades\Log;

class MessageHandler
{
    private TelegramService $telegram;
    private StateManager $stateManager;
    private KeyboardService $keyboard;
    private RepairHandler $repairHandler;
    private CartridgeHandler $cartridgeHandler;
    private InventoryHandler $inventoryHandler;
    private AdminHandler $adminHandler;

    public function __construct(
        TelegramService $telegram,
        StateManager $stateManager,
        KeyboardService $keyboard,
        RepairHandler $repairHandler,
        CartridgeHandler $cartridgeHandler,
        InventoryHandler $inventoryHandler,
        AdminHandler $adminHandler
    ) {
        $this->telegram = $telegram;
        $this->stateManager = $stateManager;
        $this->keyboard = $keyboard;
        $this->repairHandler = $repairHandler;
        $this->cartridgeHandler = $cartridgeHandler;
        $this->inventoryHandler = $inventoryHandler;
        $this->adminHandler = $adminHandler;
    }

    public function handle(array $message): void
    {
        $chatId = $message['chat']['id'];
        $userId = $message['from']['id'];
        $username = $message['from']['username'] ?? null;
        $text = $message['text'] ?? '';

        Log::info("Processing message from user {$userId}: {$text}");

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (str_starts_with($text, '/')) {
            $this->handleCommand($chatId, $userId, $username, $text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $userState = $this->stateManager->getUserState($userId);
        
        if ($userState && isset($userState['state'])) {
            $this->handleStateMessage($chatId, $userId, $username, $text, $userState);
        } else {
            $this->sendMainMenu($chatId, $userId);
        }
    }

    private function handleCommand(int $chatId, int $userId, ?string $username, string $command): void
    {
        Log::info("Handling command: {$command} for user: {$userId}");
        
        switch ($command) {
            case '/start':
                $this->handleStartCommand($chatId, $userId, $username);
                break;
            case '/help':
                $this->handleHelpCommand($chatId, $userId);
                break;
            case '/cancel':
                $this->handleCancelCommand($chatId, $userId);
                break;
            case '/admin':
                $this->handleAdminCommand($chatId, $userId);
                break;
            case '/status':
                $this->handleStatusCommand($chatId);
                break;
            default:
                $this->handleUnknownCommand($chatId, $userId, $command);
                break;
        }
    }

    private function handleStartCommand(int $chatId, int $userId, ?string $username): void
    {
        $this->stateManager->clearUserState($userId);
        $this->sendWelcomeMessage($chatId, $userId, $username);
    }

    private function handleHelpCommand(int $chatId, int $userId): void
    {
        $text = "üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n\n" .
               "üîß <b>–í—ã–∑–æ–≤ IT –º–∞—Å—Ç–µ—Ä–∞</b> - –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n" .
               "üñ®Ô∏è <b>–ó–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞</b> - –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–º–µ–Ω—É –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞\n\n" .
               "üìû <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n" .
               "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" .
               "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n" .
               "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n" .
               "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n" .
               "/status - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n" .
               "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
        
        $this->telegram->sendMessage($chatId, $text, $this->keyboard->getMainMenuKeyboard($userId));
    }

    private function handleCancelCommand(int $chatId, int $userId): void
    {
        $this->stateManager->clearUserState($userId);
        $this->telegram->sendMessage(
            $chatId, 
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
            $this->keyboard->getMainMenuKeyboard($userId)
        );
    }

    private function handleAdminCommand(int $chatId, int $userId): void
    {
        if ($this->telegram->isAdmin($userId)) {
            $this->adminHandler->sendAdminMenu($chatId);
        } else {
            $this->telegram->sendMessage($chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
        }
    }

    private function handleStatusCommand(int $chatId): void
    {
        $this->adminHandler->sendSystemStatus($chatId);
    }

    private function handleUnknownCommand(int $chatId, int $userId, string $command): void
    {
        $this->telegram->sendMessage(
            $chatId, 
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {$command}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.", 
            $this->keyboard->getMainMenuKeyboard($userId)
        );
    }

    private function handleStateMessage(int $chatId, int $userId, ?string $username, string $text, array $userState): void
    {
        $state = $userState['state'];
        $tempData = $userState['temp_data'] ?? [];

        Log::info("Handling state message", ['state' => $state, 'user_id' => $userId]);

        switch ($state) {
            // Repair states
            case 'repair_awaiting_room':
                $this->repairHandler->handleRoomInput($chatId, $userId, $text);
                break;
            case 'repair_awaiting_description':
                $this->repairHandler->handleDescriptionInput($chatId, $userId, $text);
                break;
            case 'repair_awaiting_phone':
                $this->repairHandler->handlePhoneInput($chatId, $userId, $username, $text);
                break;

            // Cartridge states
            case 'cartridge_awaiting_room':
                $this->cartridgeHandler->handleRoomInput($chatId, $userId, $text);
                break;
            case 'cartridge_awaiting_printer':
                $this->cartridgeHandler->handlePrinterInput($chatId, $userId, $text);
                break;
            case 'cartridge_awaiting_type':
                $this->cartridgeHandler->handleTypeInput($chatId, $userId, $username, $text);
                break;

            // Inventory states
            case 'inventory_room_input':
                $this->inventoryHandler->handleRoomInput($chatId, $userId, $text);
                break;
            case 'inventory_equipment_type':
                $this->inventoryHandler->handleEquipmentType($chatId, $userId, $text);
                break;
            case 'inventory_brand':
            case 'inventory_quick_brand':
                $this->inventoryHandler->handleBrand($chatId, $userId, $text);
                break;
            case 'inventory_model':
            case 'inventory_quick_model':
                $this->inventoryHandler->handleModel($chatId, $userId, $text);
                break;
            case 'inventory_serial':
            case 'inventory_quick_serial':
                $this->inventoryHandler->handleSerial($chatId, $userId, $text);
                break;
            case 'inventory_number':
                $this->inventoryHandler->handleInventoryNumber($chatId, $userId, $username, $text);
                break;

            default:
                $this->handleUnknownState($chatId, $userId, $state);
                break;
        }
    }

    private function handleUnknownState(int $chatId, int $userId, string $state): void
    {
        Log::warning("Unknown user state: {$state} for user: {$userId}");
        $this->telegram->sendMessage(
            $chatId, 
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", 
            $this->keyboard->getMainMenuKeyboard($userId)
        );
        $this->stateManager->clearUserState($userId);
    }

    private function sendWelcomeMessage(int $chatId, int $userId, ?string $username): void
    {
        $name = $username ? "@$username" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
        $text = "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, $name!\n\n" .
               "–Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –∑–∞–º–µ–Ω—ã –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π.\n\n" .
               "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?";
        
        $this->telegram->sendMessage($chatId, $text, $this->keyboard->getMainMenuKeyboard($userId));
    }

    private function sendMainMenu(int $chatId, int $userId): void
    {
        $this->telegram->sendMessage(
            $chatId, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:", 
            $this->keyboard->getMainMenuKeyboard($userId)
        );
    }
}