<?php
// routes/console.php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

/*
|--------------------------------------------------------------------------
| Console Routes
|--------------------------------------------------------------------------
|
| This file is where you may define all of your Closure based console
| commands. Each Closure is bound to a command instance allowing a
| simple approach to interacting with each command's IO methods.
|
*/

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è IT Support Panel
Artisan::command('support:clear-old-states', function () {
    $this->info('–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    $deleted = \App\Models\UserState::where('updated_at', '<', now()->subDays(7))->delete();
    
    $this->info("–£–¥–∞–ª–µ–Ω–æ $deleted —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π");
})->purpose('–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

Artisan::command('support:stats', function () {
    $this->info('=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT Support Panel ===');
    
    $repairs = \App\Models\RepairRequest::count();
    $repairsNew = \App\Models\RepairRequest::where('status', '–Ω–æ–≤–∞')->count();
    $cartridges = \App\Models\CartridgeReplacement::count();
    $branches = \App\Models\Branch::where('is_active', true)->count();
    
    $this->table(['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'], [
        ['–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç', $repairs],
        ['–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫', $repairsNew],
        ['–ó–∞–º–µ–Ω –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π', $cartridges],
        ['–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤', $branches],
    ]);
})->purpose('–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã');

Artisan::command('support:create-admin {telegram_id} {name}', function ($telegram_id, $name) {
    $this->info("–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    $existing = \App\Models\Admin::where('telegram_id', $telegram_id)->first();
    if ($existing) {
        $this->error("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å Telegram ID $telegram_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    $admin = \App\Models\Admin::create([
        'telegram_id' => $telegram_id,
        'name' => $name,
        'is_active' => true
    ]);
    
    $this->info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: ID {$admin->id}, Telegram ID: $telegram_id, –ò–º—è: $name");
})->purpose('–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot
Artisan::command('telegram:set-webhook', function () {
    $this->info('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞...');
    
    $botToken = config('services.telegram.bot_token');
    if (!$botToken) {
        $this->error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!');
        return;
    }
    
    $webhookUrl = config('app.url') . '/api/telegram/webhook';
    $apiUrl = "https://api.telegram.org/bot{$botToken}/setWebhook";
    
    try {
        $response = \Illuminate\Support\Facades\Http::post($apiUrl, [
            'url' => $webhookUrl
        ]);
        
        $result = $response->json();
        
        if ($result['ok']) {
            $this->info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {$webhookUrl}");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: " . ($result['description'] ?? 'Unknown error'));
        }
    } catch (\Exception $e) {
        $this->error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " . $e->getMessage());
    }
})->purpose('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –¥–ª—è Telegram –±–æ—Ç–∞');

Artisan::command('telegram:webhook-info', function () {
    $this->info('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook...');
    
    $botToken = config('services.telegram.bot_token');
    if (!$botToken) {
        $this->error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!');
        return;
    }
    
    $apiUrl = "https://api.telegram.org/bot{$botToken}/getWebhookInfo";
    
    try {
        $response = \Illuminate\Support\Facades\Http::get($apiUrl);
        $result = $response->json();
        
        if ($result['ok']) {
            $info = $result['result'];
            
            $this->info('=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook ===');
            $this->table(['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'], [
                ['URL', $info['url'] ?? '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'],
                ['–°—Ç–∞—Ç—É—Å', $info['has_custom_certificate'] ? '–° —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º' : '–ë–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'],
                ['–û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π', $info['pending_update_count'] ?? 0],
                ['–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞', $info['last_error_message'] ?? '–ù–µ—Ç'],
                ['–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏', isset($info['last_error_date']) ? date('Y-m-d H:i:s', $info['last_error_date']) : '–ù–µ—Ç'],
                ['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', $info['max_connections'] ?? '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'],
                ['–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', isset($info['allowed_updates']) ? implode(', ', $info['allowed_updates']) : '–í—Å–µ'],
            ]);
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " . ($result['description'] ?? 'Unknown error'));
        }
    } catch (\Exception $e) {
        $this->error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " . $e->getMessage());
    }
})->purpose('–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook');

Artisan::command('telegram:delete-webhook', function () {
    $this->info('–£–¥–∞–ª–µ–Ω–∏–µ webhook...');
    
    $botToken = config('services.telegram.bot_token');
    if (!$botToken) {
        $this->error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!');
        return;
    }
    
    $apiUrl = "https://api.telegram.org/bot{$botToken}/deleteWebhook";
    
    try {
        $response = \Illuminate\Support\Facades\Http::post($apiUrl);
        $result = $response->json();
        
        if ($result['ok']) {
            $this->info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: " . ($result['description'] ?? 'Unknown error'));
        }
    } catch (\Exception $e) {
        $this->error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " . $e->getMessage());
    }
})->purpose('–£–¥–∞–ª–∏—Ç—å webhook');

Artisan::command('telegram:test-bot', function () {
    $this->info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞...');
    
    $botToken = config('services.telegram.bot_token');
    if (!$botToken) {
        $this->error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!');
        return;
    }
    
    $apiUrl = "https://api.telegram.org/bot{$botToken}/getMe";
    
    try {
        $response = \Illuminate\Support\Facades\Http::get($apiUrl);
        $result = $response->json();
        
        if ($result['ok']) {
            $bot = $result['result'];
            
            $this->info('=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ===');
            $this->table(['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'], [
                ['ID', $bot['id']],
                ['–ò–º—è', $bot['first_name']],
                ['Username', '@' . $bot['username']],
                ['–¢–∏–ø', $bot['is_bot'] ? '–ë–æ—Ç' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'],
                ['–ú–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º', $bot['can_join_groups'] ? '–î–∞' : '–ù–µ—Ç'],
                ['–ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è', $bot['can_read_all_group_messages'] ? '–î–∞' : '–ù–µ—Ç'],
                ['–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç inline –∑–∞–ø—Ä–æ—Å—ã', $bot['supports_inline_queries'] ? '–î–∞' : '–ù–µ—Ç'],
            ]);
            
            $this->info("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: " . ($result['description'] ?? 'Unknown error'));
        }
    } catch (\Exception $e) {
        $this->error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " . $e->getMessage());
    }
})->purpose('–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');

Artisan::command('support:backup', function () {
    $this->info('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
    
    $filename = 'backup_' . date('Y-m-d_H-i-s') . '.sql';
    
    // –ö–æ–º–∞–Ω–¥–∞ mysqldump (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
    $command = sprintf(
        'mysqldump -u %s -p%s %s > %s',
        env('DB_USERNAME'),
        env('DB_PASSWORD'),
        env('DB_DATABASE'),
        storage_path('app/backups/' . $filename)
    );
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    if (!is_dir(storage_path('app/backups'))) {
        mkdir(storage_path('app/backups'), 0755, true);
    }
    
    $this->info("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $filename");
})->purpose('–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');

Artisan::command('telegram:diagnose', function () {
    $this->info('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram Bot...');
    $this->newLine();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    $botToken = config('services.telegram.bot_token');
    if (!$botToken) {
        $this->error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env');
        return;
    }
    $this->info('‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    $appUrl = config('app.url');
    if (!$appUrl || $appUrl === 'http://localhost') {
        $this->warn('‚ö†Ô∏è APP_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ localhost - webhook –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å');
    } else {
        $this->info("‚úÖ APP_URL: {$appUrl}");
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
    $this->info('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É...');
    try {
        $apiUrl = "https://api.telegram.org/bot{$botToken}/getMe";
        $response = \Illuminate\Support\Facades\Http::timeout(10)->get($apiUrl);
        $result = $response->json();
        
        if ($result['ok']) {
            $bot = $result['result'];
            $this->info("‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{$bot['username']} ({$bot['first_name']})");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: " . ($result['description'] ?? 'Unknown'));
            return;
        }
    } catch (\Exception $e) {
        $this->error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API: " . $e->getMessage());
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
    $this->info('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook...');
    try {
        $apiUrl = "https://api.telegram.org/bot{$botToken}/getWebhookInfo";
        $response = \Illuminate\Support\Facades\Http::timeout(10)->get($apiUrl);
        $result = $response->json();
        
        if ($result['ok']) {
            $info = $result['result'];
            $webhookUrl = config('app.url') . '/api/telegram/webhook';
            
            if (empty($info['url'])) {
                $this->warn('‚ö†Ô∏è Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                $this->info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: php artisan telegram:set-webhook");
            } elseif ($info['url'] !== $webhookUrl) {
                $this->warn("‚ö†Ô∏è Webhook URL –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç:");
                $this->line("   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {$info['url']}");
                $this->line("   –û–∂–∏–¥–∞–µ—Ç—Å—è: {$webhookUrl}");
                $this->info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: php artisan telegram:set-webhook");
            } else {
                $this->info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
            
            if ($info['pending_update_count'] > 0) {
                $this->warn("‚ö†Ô∏è –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {$info['pending_update_count']}");
            }
            
            if (!empty($info['last_error_message'])) {
                $this->error("‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ webhook: {$info['last_error_message']}");
                if (isset($info['last_error_date'])) {
                    $errorDate = date('Y-m-d H:i:s', $info['last_error_date']);
                    $this->line("   –í—Ä–µ–º—è –æ—à–∏–±–∫–∏: {$errorDate}");
                }
            }
        }
    } catch (\Exception $e) {
        $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: " . $e->getMessage());
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    $this->info('üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    try {
        $adminsCount = \App\Models\Admin::where('is_active', true)->count();
        $branchesCount = \App\Models\Branch::where('is_active', true)->count();
        
        if ($adminsCount === 0) {
            $this->warn('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
            $this->info('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: php artisan support:create-admin YOUR_TELEGRAM_ID "–í–∞—à–µ –ò–º—è"');
        } else {
            $this->info("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {$adminsCount}");
        }
        
        if ($branchesCount === 0) {
            $this->warn('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤');
        } else {
            $this->info("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤: {$branchesCount}");
        }
        
    } catch (\Exception $e) {
        $this->error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: " . $e->getMessage());
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    $this->info('üõ£Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
    try {
        $routes = collect(\Illuminate\Support\Facades\Route::getRoutes())->filter(function ($route) {
            return str_contains($route->uri(), 'telegram');
        });
        
        if ($routes->count() > 0) {
            $this->info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ Telegram: {$routes->count()}");
        } else {
            $this->error("‚ùå –ú–∞—Ä—à—Ä—É—Ç—ã Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        }
    } catch (\Exception $e) {
        $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: " . $e->getMessage());
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
    $this->info('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤...');
    try {
        $logFile = storage_path('logs/laravel.log');
        if (file_exists($logFile)) {
            $logs = file_get_contents($logFile);
            $telegramLogs = collect(explode("\n", $logs))
                ->filter(fn($line) => str_contains($line, 'Telegram'))
                ->take(-5);
                
            if ($telegramLogs->count() > 0) {
                $this->info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: {$telegramLogs->count()}");
                $this->line("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:");
                foreach ($telegramLogs as $log) {
                    $this->line("   " . substr($log, 0, 100) . "...");
                }
            } else {
                $this->warn('‚ö†Ô∏è –ó–∞–ø–∏—Å–µ–π Telegram –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        } else {
            $this->warn('‚ö†Ô∏è –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (\Exception $e) {
        $this->warn("‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏: " . $e->getMessage());
    }
    
    $this->newLine();
    $this->info('üéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    $this->newLine();
    $this->info('üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    $this->line('   php artisan telegram:set-webhook     - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook');
    $this->line('   php artisan telegram:test-bot        - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
    $this->line('   php artisan support:create-admin     - –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    $this->line('   php artisan support:stats            - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã');
    
})->purpose('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Telegram –±–æ—Ç–æ–º');

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ routes/console.php

Artisan::command('telegram:test-api', function () {
    $this->info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram API –∑–∞–ø—Ä–æ—Å–æ–≤...');
    $this->newLine();
    
    $botToken = config('services.telegram.bot_token') ?? env('TELEGRAM_BOT_TOKEN');
    
    if (!$botToken) {
        $this->error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã API
    $methods = [
        'getMe' => [],
        'sendMessage' => [
            'chat_id' => '123456789', // –§–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
            'text' => 'Test message'
        ],
        'getUpdates' => ['limit' => 1]
    ];
    
    foreach ($methods as $method => $params) {
        $this->info("üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥: {$method}");
        
        $apiUrl = "https://api.telegram.org/bot{$botToken}/{$method}";
        $this->line("   URL: {$apiUrl}");
        
        try {
            if (empty($params)) {
                $response = \Illuminate\Support\Facades\Http::timeout(10)->get($apiUrl);
            } else {
                $response = \Illuminate\Support\Facades\Http::timeout(10)->post($apiUrl, $params);
            }
            
            $this->line("   HTTP Status: {$response->status()}");
            
            $result = $response->json();
            if ($result) {
                if ($result['ok']) {
                    $this->info("   ‚úÖ –£—Å–ø–µ—à–Ω–æ");
                } else {
                    $this->warn("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {$result['description']} (–∫–æ–¥: {$result['error_code']})");
                }
            } else {
                $this->error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –æ—Ç–≤–µ—Ç");
                $this->line("   –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: " . $response->body());
            }
            
        } catch (\Exception $e) {
            $this->error("   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
        }
        
        $this->newLine();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    $this->info('üì® –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    try {
        $apiUrl = "https://api.telegram.org/bot{$botToken}/getUpdates";
        $response = \Illuminate\Support\Facades\Http::timeout(10)->get($apiUrl, ['limit' => 5]);
        $result = $response->json();
        
        if ($result && $result['ok']) {
            $updates = $result['result'];
            $this->info("   –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: " . count($updates));
            
            foreach ($updates as $update) {
                if (isset($update['message'])) {
                    $message = $update['message'];
                    $chatId = $message['chat']['id'];
                    $text = $message['text'] ?? '[–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]';
                    $date = date('Y-m-d H:i:s', $message['date']);
                    
                    $this->line("   - Update ID: {$update['update_id']}");
                    $this->line("     Chat ID: {$chatId}");
                    $this->line("     –¢–µ–∫—Å—Ç: {$text}");
                    $this->line("     –î–∞—Ç–∞: {$date}");
                    $this->newLine();
                }
            }
        } else {
            $this->error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        }
        
    } catch (\Exception $e) {
        $this->error("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: " . $e->getMessage());
    }
    
})->purpose('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram API –∑–∞–ø—Ä–æ—Å–æ–≤');

Artisan::command('telegram:test-webhook', function () {
    $this->info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –Ω–∞–ø—Ä—è–º—É—é...');
    $this->newLine();
    
    $webhookUrl = config('app.url') . '/api/telegram/webhook';
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –æ—Ç Telegram)
    $testUpdate = [
        'update_id' => 999999999,
        'message' => [
            'message_id' => 1,
            'from' => [
                'id' => 123456789,
                'is_bot' => false,
                'first_name' => 'Test',
                'username' => 'testuser'
            ],
            'chat' => [
                'id' => 123456789,
                'first_name' => 'Test',
                'username' => 'testuser',
                'type' => 'private'
            ],
            'date' => time(),
            'text' => '/start'
        ]
    ];
    
    $this->info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π webhook –Ω–∞: {$webhookUrl}");
    
    try {
        $response = \Illuminate\Support\Facades\Http::timeout(30)
            ->post($webhookUrl, $testUpdate);
        
        $this->info("üì® HTTP Status: {$response->status()}");
        $this->info("üì® Response: " . $response->body());
        
        if ($response->successful()) {
            $this->info("‚úÖ Webhook –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        } else {
            $this->error("‚ùå Webhook –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É");
        }
        
    } catch (\Exception $e) {
        $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ webhook: " . $e->getMessage());
    }
    
    $this->newLine();
    $this->info("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Laravel –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:");
    $this->line("   tail -f storage/logs/laravel.log");
    
})->purpose('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –Ω–∞–ø—Ä—è–º—É—é');

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ routes/console.php

Artisan::command('telegram:debug-send {chat_id} {message}', function ($chatId, $message) {
    $this->info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...");
    
    $controller = new \App\Http\Controllers\Api\TelegramBotController();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    $reflection = new ReflectionClass($controller);
    $method = $reflection->getMethod('sendMessage');
    $method->setAccessible(true);
    
    try {
        $result = $method->invoke($controller, $chatId, $message);
        
        if ($result) {
            $this->info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
            $this->line("–†–µ–∑—É–ª—å—Ç–∞—Ç: " . json_encode($result, JSON_PRETTY_PRINT));
        } else {
            $this->error("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
        }
    } catch (\Exception $e) {
        $this->error("‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage());
    }
})->purpose('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');

Artisan::command('telegram:check-admins', function () {
    $this->info('üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
    $this->newLine();
    
    $admins = \App\Models\Admin::where('is_active', true)->get();
    
    if ($admins->isEmpty()) {
        $this->error('‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        $this->newLine();
        $this->info('üí° –°–æ–∑–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π:');
        $this->line('   php artisan support:create-admin YOUR_TELEGRAM_ID "Your Name"');
        return;
    }
    
    $this->info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {$admins->count()}");
    $this->newLine();
    
    $controller = new \App\Http\Controllers\Api\TelegramBotController();
    $reflection = new ReflectionClass($controller);
    $sendMethod = $reflection->getMethod('sendMessage');
    $sendMethod->setAccessible(true);
    
    foreach ($admins as $admin) {
        $this->info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞: {$admin->name} (ID: {$admin->telegram_id})");
        
        try {
            $testMessage = "ü§ñ –¢–µ—Å—Ç —Å–≤—è–∑–∏ —Å –±–æ—Ç–æ–º\n\n–í—Ä–µ–º—è: " . now()->format('d.m.Y H:i:s');
            $result = $sendMethod->invoke($controller, $admin->telegram_id, $testMessage);
            
            if ($result) {
                $this->info("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ");
            } else {
                $this->error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
            }
        } catch (\Exception $e) {
            $this->error("   ‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage());
        }
        
        $this->newLine();
    }
})->purpose('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');

Artisan::command('telegram:fix-webhook', function () {
    $this->info('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook...');
    $this->newLine();
    
    $botToken = config('services.telegram.bot_token');
    if (!$botToken) {
        $this->error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
    $this->info('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook...');
    try {
        $response = \Illuminate\Support\Facades\Http::post("https://api.telegram.org/bot{$botToken}/deleteWebhook");
        $result = $response->json();
        
        if ($result['ok']) {
            $this->info('‚úÖ –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω');
        } else {
            $this->warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' . ($result['description'] ?? 'Unknown'));
        }
    } catch (\Exception $e) {
        $this->warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' . $e->getMessage());
    }
    
    // 2. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    $this->info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...');
    sleep(3);
    
    // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    $webhookUrl = config('app.url') . '/api/telegram/webhook';
    $this->info("üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ webhook: {$webhookUrl}");
    
    try {
        $response = \Illuminate\Support\Facades\Http::post("https://api.telegram.org/bot{$botToken}/setWebhook", [
            'url' => $webhookUrl,
            'allowed_updates' => ['message', 'callback_query']
        ]);
        $result = $response->json();
        
        if ($result['ok']) {
            $this->info('‚úÖ –ù–æ–≤—ã–π webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ' . ($result['description'] ?? 'Unknown'));
            return;
        }
    } catch (\Exception $e) {
        $this->error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: ' . $e->getMessage());
        return;
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    $this->info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook...');
    try {
        $response = \Illuminate\Support\Facades\Http::get("https://api.telegram.org/bot{$botToken}/getWebhookInfo");
        $result = $response->json();
        
        if ($result['ok']) {
            $info = $result['result'];
            $this->info('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
            $this->line("   URL: " . ($info['url'] ?? '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
            $this->line("   –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: " . ($info['pending_update_count'] ?? 0));
            
            if (!empty($info['last_error_message'])) {
                $this->error("   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {$info['last_error_message']}");
            } else {
                $this->info('   ‚úÖ –û—à–∏–±–æ–∫ –Ω–µ—Ç');
            }
        }
    } catch (\Exception $e) {
        $this->error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ' . $e->getMessage());
    }
    
    $this->newLine();
    $this->info('üéØ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É.');
})->purpose('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook');

Artisan::command('telegram:clear-updates', function () {
    $this->info('üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∫–æ–ø–∏–≤—à–∏—Ö—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    
    $botToken = config('services.telegram.bot_token');
    if (!$botToken) {
        $this->error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        $response = \Illuminate\Support\Facades\Http::get("https://api.telegram.org/bot{$botToken}/getUpdates", [
            'offset' => -1,
            'limit' => 1
        ]);
        $result = $response->json();
        
        if ($result['ok'] && !empty($result['result'])) {
            $lastUpdate = end($result['result']);
            $lastUpdateId = $lastUpdate['update_id'];
            
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ —ç—Ç–æ–≥–æ ID
            $confirmResponse = \Illuminate\Support\Facades\Http::get("https://api.telegram.org/bot{$botToken}/getUpdates", [
                'offset' => $lastUpdateId + 1,
                'limit' => 1
            ]);
            
            if ($confirmResponse->json()['ok']) {
                $this->info('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
            }
        } else {
            $this->info('‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    } catch (\Exception $e) {
        $this->error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ' . $e->getMessage());
    }
})->purpose('–û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram');

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ routes/console.php

Artisan::command('telegram:test-direct {chat_id?}', function ($chatId = null) {
    $this->info('üîç –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram API...');
    
    $botToken = config('services.telegram.bot_token') ?? env('TELEGRAM_BOT_TOKEN');
    
    if (!$botToken) {
        $this->error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∞
    if (!$chatId) {
        $admin = \App\Models\Admin::where('is_active', true)->first();
        if ($admin) {
            $chatId = $admin->telegram_id;
            $this->info("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {$chatId}");
        } else {
            $this->error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω chat_id –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
            return;
        }
    }
    
    $this->info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ chat_id: {$chatId}");
    
    $url = "https://api.telegram.org/bot{$botToken}/sendMessage";
    $data = [
        'chat_id' => $chatId,
        'text' => 'ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Laravel –±–æ—Ç–∞\n\n–í—Ä–µ–º—è: ' . now()->format('d.m.Y H:i:s'),
        'parse_mode' => 'HTML'
    ];
    
    try {
        $response = \Illuminate\Support\Facades\Http::timeout(30)->post($url, $data);
        
        $this->info("üì® HTTP Status: {$response->status()}");
        $this->info("üì® Response Headers: " . json_encode($response->headers()));
        $this->info("üì® Response Body: " . $response->body());
        
        $result = $response->json();
        
        if ($result && isset($result['ok'])) {
            if ($result['ok']) {
                $this->info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
                $this->info("üìã Message ID: " . $result['result']['message_id']);
            } else {
                $this->error("‚ùå Telegram API –æ—à–∏–±–∫–∞:");
                $this->error("   –ö–æ–¥: " . ($result['error_code'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'));
                $this->error("   –û–ø–∏—Å–∞–Ω–∏–µ: " . ($result['description'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'));
            }
        } else {
            $this->error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API");
        }
        
    } catch (\Exception $e) {
        $this->error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
        $this->error("   –§–∞–π–ª: " . $e->getFile());
        $this->error("   –°—Ç—Ä–æ–∫–∞: " . $e->getLine());
    }
})->purpose('–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');

Artisan::command('telegram:check-routes', function () {
    $this->info('üõ£Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ Telegram...');
    
    $routes = collect(\Illuminate\Support\Facades\Route::getRoutes())
        ->filter(function ($route) {
            return str_contains($route->uri(), 'telegram');
        });
    
    if ($routes->count() === 0) {
        $this->error('‚ùå –ú–∞—Ä—à—Ä—É—Ç—ã Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        return;
    }
    
    $this->info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {$routes->count()}");
    $this->newLine();
    
    foreach ($routes as $route) {
        $this->line("üìç " . implode('|', $route->methods()) . " " . $route->uri());
        $this->line("   –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: " . ($route->getActionName() ?? 'Closure'));
        $this->line("   –ò–º—è: " . ($route->getName() ?? '–±–µ–∑ –∏–º–µ–Ω–∏'));
        $this->newLine();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook URL
    $webhookUrl = config('app.url') . '/api/telegram/webhook';
    $this->info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook: {$webhookUrl}");
    
    try {
        $response = \Illuminate\Support\Facades\Http::timeout(10)->post($webhookUrl, [
            'test' => true
        ]);
        
        $this->info("üì® HTTP Status: {$response->status()}");
        $this->info("üì® Response: " . $response->body());
        
        if ($response->successful()) {
            $this->info("‚úÖ Webhook –¥–æ—Å—Ç—É–ø–µ–Ω");
        } else {
            $this->error("‚ùå Webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        }
        
    } catch (\Exception $e) {
        $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: " . $e->getMessage());
    }
})->purpose('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook');

Artisan::command('telegram:simulate-webhook', function () {
    $this->info('üé≠ –°–∏–º—É–ª—è—Ü–∏—è webhook –∑–∞–ø—Ä–æ—Å–∞...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç Telegram
    $testUpdate = [
        'update_id' => 999999999,
        'message' => [
            'message_id' => 1,
            'from' => [
                'id' => 123456789,
                'is_bot' => false,
                'first_name' => 'Test',
                'username' => 'testuser'
            ],
            'chat' => [
                'id' => 123456789,
                'first_name' => 'Test',
                'username' => 'testuser',
                'type' => 'private'
            ],
            'date' => time(),
            'text' => '/start'
        ]
    ];
    
    $this->info('üì§ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:');
    $this->line(json_encode($testUpdate, JSON_PRETTY_PRINT));
    $this->newLine();
    
    try {
        // –°–æ–∑–¥–∞–µ–º fake HTTP request
        $request = new \Illuminate\Http\Request();
        $request->replace($testUpdate);
        
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞–ø—Ä—è–º—É—é
        $controller = new \App\Http\Controllers\Api\TelegramBotController();
        $response = $controller->webhook($request);
        
        $this->info('üì® –û—Ç–≤–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞:');
        $this->line($response->getContent());
        
        if ($response->getStatusCode() === 200) {
            $this->info('‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ webhook, –∫–æ–¥: {$response->getStatusCode()}");
        }
        
    } catch (\Exception $e) {
        $this->error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è webhook: ' . $e->getMessage());
        $this->error('   –§–∞–π–ª: ' . $e->getFile());
        $this->error('   –°—Ç—Ä–æ–∫–∞: ' . $e->getLine());
        $this->error('   –¢—Ä–µ–π—Å: ' . $e->getTraceAsString());
    }
})->purpose('–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å webhook –∑–∞–ø—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ');

Artisan::command('telegram:check-config', function () {
    $this->info('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    $this->newLine();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    $configs = [
        'APP_URL' => config('app.url'),
        'TELEGRAM_BOT_TOKEN' => config('services.telegram.bot_token') ?? env('TELEGRAM_BOT_TOKEN'),
        'APP_ENV' => config('app.env'),
        'APP_DEBUG' => config('app.debug') ? 'true' : 'false',
        'DB_CONNECTION' => config('database.default'),
    ];
    
    foreach ($configs as $key => $value) {
        if (empty($value)) {
            $this->error("‚ùå {$key}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        } else {
            if ($key === 'TELEGRAM_BOT_TOKEN') {
                $maskedValue = substr($value, 0, 10) . '...' . substr($value, -6);
                $this->info("‚úÖ {$key}: {$maskedValue}");
            } else {
                $this->info("‚úÖ {$key}: {$value}");
            }
        }
    }
    
    $this->newLine();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    $this->info('üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...');
    try {
        $adminCount = \App\Models\Admin::count();
        $branchCount = \App\Models\Branch::count();
        
        $this->info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç");
        $this->info("üìä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {$adminCount}");
        $this->info("üìä –§–∏–ª–∏–∞–ª–æ–≤: {$branchCount}");
        
        if ($adminCount === 0) {
            $this->warn('‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤! –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π:');
            $this->line('   php artisan support:create-admin YOUR_TELEGRAM_ID "Your Name"');
        }
        
    } catch (\Exception $e) {
        $this->error('‚ùå –û—à–∏–±–∫–∞ –ë–î: ' . $e->getMessage());
    }
    
    $this->newLine();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤
    $this->info('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å...');
    $logPath = storage_path('logs');
    if (is_writable($logPath)) {
        $this->info("‚úÖ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {$logPath}");
    } else {
        $this->error("‚ùå –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {$logPath}");
    }
    
    $cachePath = storage_path('framework/cache');
    if (is_writable($cachePath)) {
        $this->info("‚úÖ –ü–∞–ø–∫–∞ –∫–µ—à–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {$cachePath}");
    } else {
        $this->error("‚ùå –ü–∞–ø–∫–∞ –∫–µ—à–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {$cachePath}");
    }
})->purpose('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã');

Artisan::command('telegram:force-notify {message?}', function ($message = null) {
    $this->info('üì¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º...');
    
    $message = $message ?? 'üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n\n–í—Ä–µ–º—è: ' . now()->format('d.m.Y H:i:s');
    
    $admins = \App\Models\Admin::where('is_active', true)->get();
    
    if ($admins->isEmpty()) {
        $this->error('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
        return;
    }
    
    $botToken = config('services.telegram.bot_token') ?? env('TELEGRAM_BOT_TOKEN');
    if (!$botToken) {
        $this->error('‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    $successCount = 0;
    $failCount = 0;
    
    foreach ($admins as $admin) {
        $this->info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É: {$admin->name} (ID: {$admin->telegram_id})");
        
        try {
            $response = \Illuminate\Support\Facades\Http::post(
                "https://api.telegram.org/bot{$botToken}/sendMessage",
                [
                    'chat_id' => $admin->telegram_id,
                    'text' => $message,
                    'parse_mode' => 'HTML'
                ]
            );
            
            $result = $response->json();
            
            if ($result && $result['ok']) {
                $this->info("   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                $successCount++;
            } else {
                $this->error("   ‚ùå –û—à–∏–±–∫–∞: " . ($result['description'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'));
                $failCount++;
            }
            
        } catch (\Exception $e) {
            $this->error("   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
            $failCount++;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        usleep(500000); // 0.5 —Å–µ–∫—É–Ω–¥—ã
    }
    
    $this->newLine();
    $this->info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
    $this->info("   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {$successCount}");
    $this->info("   ‚ùå –û—à–∏–±–æ–∫: {$failCount}");
    
})->purpose('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');